CREATE OR REPLACE FUNCTION JSONB_HAS_USER_ID(JSONB, text)
RETURNS BOOL AS $$
select  $1->'users' ? $2
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_CHECK_USER_ACCESS(JSONB, text, text)
RETURNS BOOL AS $$
select  $1->'users'->$2->>'access' like $3
        $$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_HAS_USER_GROUP_IDS(JSONB, text)
RETURNS BOOL AS $$
SELECT   $1->'userGroups' ?| $2::text[];
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_CHECK_USER_GROUPS_ACCESS(JSONB, text, text)
RETURNS BOOL AS $$
SELECT exists(
               SELECT 1
               FROM  jsonb_each($1->'userGroups') je
               WHERE je.key = ANY ($3::text[])
                 AND je.value->>'access' LIKE $2
     );
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_HAS_TEAM_ID(JSONB, text)
RETURNS BOOL AS $$
select  $1->'teams' ? $2
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_CHECK_TEAM_ACCESS(JSONB, text, text)
RETURNS BOOL AS $$
select  $1->'teams'->$2->>'access' like $3
        $$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_HAS_TEAM_GROUP_IDS(JSONB, text)
RETURNS BOOL AS $$
SELECT   $1->'teamGroups' ?| $2::text[];
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION JSONB_CHECK_TEAM_GROUPS_ACCESS(JSONB, text, text)
RETURNS BOOL AS $$
SELECT exists(
               SELECT 1
               FROM  jsonb_each($1->'teamGroups') je
               WHERE je.key = ANY ($3::text[])
                 AND je.value->>'access' LIKE $2
     );
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;

CREATE OR REPLACE FUNCTION REGEXP_SEARCH(CHARACTER varying, CHARACTER varying)
RETURNS boolean AS 'select $1 ~* $2;' LANGUAGE SQL;
